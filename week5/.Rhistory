install.packages("gplots")
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("limma")
install.packages("devtools")
library(devtools)
devtools::install_github("karthik/wesanderson")
library(gplots)
library(limma)
library(wesanderson)
setwd("tutorials/week5")
setwd()
setwd("~")
setwd("tutorials")
setwd("BINF2010/week5")
ls
clear
clear()
load("R_basics.Rdata")
sum(x)
plot(x,y)
require(limma)
source("helper.R")
pi
TRUE
T
NULL
NA
NAN
NaN
Inf
5+5*3
2/4
(4+5^7)/56
3 %% 5
11 %% 5
x <- 1
y = 2
very_important_variable <- 0
not_very_important = 100
very_important_variable
data <- 0
data <- 3
data <- x + y
data <- sqrt(x)
data <- rnorm(1000)
more_data <- 1000
data <- data + more_data
data
data <- 0
data <- 3
data <- x + y
data <- sqrt(x)
data <- rnorm(1000)
more_data <- 1000
data <- data + more_data
rnorm
rnorm(10)
rnorm(10) + 5
5e-1
5e-2
5e9
"A" + "B"
var()
var
my_var <- "hello"
my_var
["a", "b"]
?c
c(1,2,3)
list
l = c(1,2,3)
l
letters = c('A', 'B', 'C')
letters
letters[1]
letters[1:2]
letters[1:3]
letters[1:4]
letters[1:5]
rnorm(100)
rep(1,10)
rep(5,10)
rep(5,10)
1:2
1:5
my_seq <- seq(0,200,10)
my_seq
len(my_seq)
length(my_seq)
my_seq[1]
my_seq[0]
0
my_seq[1] <- 1000
my_seq[3:6] <- c(30,20,40,36)
my_seq
diag(10)
matrix(1:10, ncol=5, nrow=2)
cbind(1:10, 10:1)
rbind(1:10, 10:1)
cbind(c("a", "b", "c"), c("d", "e", "f"))
rbind(c("a", "b", "c"), c("d", "e", "f"))
### Creating matrices from rows ^
A <- diag(5)
A[1,5] <- 9
A
# We index matrices with row first, then column.
A[1,6] <- 9
## Negative indexing
my_seq <- seq(0,200,10)
my_seq[-10]
my_seq[-10:-20]
# Lists are collections of data, and elements in a list can be of varying lengths and data classes/types.
B <- 1:10
C <- sex
C <- "sex"
D <- list(A,B,C)
D
D[[1]]
D
D[1]
D[2]
D[3]
D[[1]]
D[1]
names(D) <- c("A", "B", "C")
D
D$A
D["A"]
D[["A"]
]
D[["A"], 1]
D[["A", 1]
]
D["A", 1]
D
D[[2]]
D[2]
class(D[2])
class(D[[2]])
D[[2]]
D[[4]] <- D
D[[4]][[4]] <- D
D[[4]][[4]][[3]]
D
D[[1]] <- NULL
D
## Appending two lists
my_list = list("a", "b", "c")
your_list = list("x", "y","z")
append(my_list, your_list)
E <- list()
E
sex <-  c("male", "female", "male", "male", "female")
sex <- factor( sex, levels=c("male", "female"))
sex
sex[1] <- "female"
sex
sex[2] <- "unknown" # This will cause an error!
sex # You should see the NA value
data.frame( x=1:10, y = rep("hello", 10) )
data
data?
?data
data.frame( x=1:10, y = rep("hello", 10) )
data.frame( column_1=1:10, column_2 = rep("hello", 10) )
df = data.frame( column_1=1:10, column_2 = rep("hello", 10) )
df
class(df)
df[0, 1]
df[1, 1
]
df[1, 2]
ls()
my_function <- function(arg1, arg2, ... ){
commands (or statements)
?order
sex
order(sex)
dist
my_plot <- function(data){ plot(data, pch=19, col=”blue”, cex=2) }
my_plot <- function(data){plot(data, pch=19, col=”blue”, cex=2) }
my_plot <- function(data){
plot(data, pch=19, col=”blue”, cex=2)
my_plot <- function(data) {
plot(data, pch=19, col=”blue”, cex=2)
my_plot <- function(data) {
plot(data, pch=19, col="blue", cex=2)
}
my_plot(my_seq)
my_seq
#### Questions
my_random_numbers <- rnorm(10)
length(my_random_numbers)
my_random_numbers[1]
n <- length(my_random_numbers)
my_random_numbers[n]
B1 <- matrix(data=seq(25), nrow=5, ncol=5)
B1
seq(5, 2)
seq(1, 25)
seq(1, 25, 2)
seq(25, 1)
B2 <- matrix(data=seq(25, 1), ncol=5, nrow=5)
B1 %*% B2
B <- B1 %*% B2
B1[,1]
B1
# First column of B1
B1[,1]
B2[B2.nrow,]
nrows
rows
nrow(B2)
B2[nrow(B2),]
### Get diagonal of B
diag(B)
#### Catterplot
library(CatterPlots)
devtools::install_github("Gibbsdavidl/CatterPlots")
library(CatterPlots)
x <- -10:10
y <- -x^2 + 10
rainbowCats(x, y, yspread=0.05, xspread=0.05, ptsize=2, catshiftx=0.5, catshifty=-0.2, canvas=c(-0.5,1.5,-1,1.5))
to_plot <- matrix(0, ncol=20, nrow=40)
to_plot
image(to_plot)
image(to_plot, ylab=F)
image(to_plot, ylab="", yaxt="n")
image(to_plot, ylab="", yaxt="n", xaxt="n")
nrow(to_plot)
to_plot[5:30,5] <- 1
image(to_plot, ylab="", yaxt="n", xaxt="n")
to_plot[5:30,15] <- 1
image(to_plot, ylab="", yaxt="n", xaxt="n")
to_plot[5,5:15] <- 1
image(to_plot, ylab="", yaxt="n", xaxt="n")
to_plot[30,5:15] <- 1
image(to_plot, ylab="", yaxt="n", xaxt="n")
install.packages("gplots")
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("limma")
install.packages("devtools")
library(devtools)
devtools::install_github("karthik/wesanderson")
getwd()
print("hello")
print("hello")
print("Hello World")
load("R_basics.Rdata")
1 + 2
2/4
(4+5^7)/56
3 %% 5
log10(100)
10 %% 5
11 %% 5
x <- 1
y = 2
very_important_variable <- 0
not_very_important = 100
rnorm(10)
?rnorm
rnorm(10, mean=5, sd=2)
data <- rnorm(10)
more_data <- 1000
data
data + more_data
data / 5
5e1
5e-1
1e2
1e3
1e-1
1e-2
character <- "A"
character
"Yaaaas"
"Booo"
"Whatever"
c(1, 2, 3)
array_1 <- c(1,2,3)
array_1
c("Hello", "Goodbye")
c("Hello", 5)
1:10
rep(1,10)
rep("A", 5)
seq(0,200,10)
my_seq <- seq(0,200,10)
my_seq[1]
my_seq[0]
x <- c("a", "b", "c")
x[1:2]
x[1:3]
x[1:4]
my_seq <- seq(0,200,10)
my_seq
my_seq[1] <- 1000
my_seq
my_seq[2:5] <- 1
my_seq
my_seq[2:5] <- c(1, 2, 3, 4)
my_seq
my_seq[2:5] <- c(1, 2, 3, 4, 5)
diag(10)
m <- diag(10)
m[1, 7]
matrix(1:10, ncol=5, nrow=2)
matrix(1:10, ncol=5, nrow=3)
matrix(1:15, ncol=5, nrow=3)
seq1 <- rnmorm(10)
seq1 <- rnorm(10)
seq1
length(seq1)
rnorm_matrix <- matrix(seq1, ncol=2, nrow=5)
rnorm_matrix
A <- diag(5)
A[1,5] <- 9
A
seq1 <- rnorm(100)
rnorm_matrix <- matrix(seq1, ncol=2, nrow=5)
rnorm_matrix <- matrix(seq1[1:10], ncol=2, nrow=5)
col1 <- 1:10
col1
col2 <- 10:1
col2
cbind(col1, col2)
a <- 1:10
b <- 10:1
cbind(a, b)
rbind(a, b)
a
my_seq <- seq(0,200,10)
my_seq
my_seq[10]
length(my_seq)
my_seq[-10]
my_seq[-10:-12]
my_list = list("a", "b", 1)
your_list = list("x", "y","z")
total_list <- append(my_list, your_list)
total_list
E <- list()
E
sex <-  c("male", "female", "male", "male", "female")
sex <- factor( sex, levels=c("male", "female"))
sex
sex[1]
sex[1] <- "female"
sex
sex[2] <- "unknown"
sex
all_options = c(1,2,3,4)
values <- c(1, 1, 2, 2, 1, 2)
factored_mice_values <- factor(values, levels = all_options)
factored_mice_values <- factor(values, levels = all_options[1:2])
factored_mice_values
values <- c(1, 1, 2, 2, 1, 2, 3, 4, 3, 4)
factored_mice_values <- factor(values, levels = all_options[1:2])
factored_mice_values
